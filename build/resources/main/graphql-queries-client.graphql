# GraphQL Queries for Spring Boot Client

# Query 1: Get past launches (matching your example)
query GetPastLaunches($limit: Int) {
  launchesPast(limit: $limit) {
    mission_name
    launch_date_local
    launch_site {
      site_name_long
    }
    links {
      article_link
      video_link
    }
    rocket {
      rocket_name
    }
  }
}

# Query 2: Get past launches with more details
query GetPastLaunchesDetailed($limit: Int, $offset: Int) {
  launchesPast(limit: $limit, offset: $offset) {
    id
    mission_name
    launch_date_local
    launch_date_utc
    launch_year
    launch_success
    details
    launch_site {
      site_id
      site_name
      site_name_long
    }
    links {
      mission_patch
      mission_patch_small
      article_link
      video_link
      wikipedia
      youtube_id
      flickr_images
    }
    rocket {
      rocket_id
      rocket_name
      rocket_type
      first_stage {
        cores {
          core_serial
          flight
          reused
          land_success
          landing_type
        }
      }
      second_stage {
        payloads {
          payload_id
          customers
          nationality
          manufacturer
          payload_type
          payload_mass_kg
          orbit
        }
      }
    }
  }
}

# Query 3: Get upcoming launches
query GetUpcomingLaunches($limit: Int) {
  launchesUpcoming(limit: $limit) {
    id
    mission_name
    launch_date_local
    launch_date_utc
    launch_site {
      site_name_long
    }
    rocket {
      rocket_name
    }
    details
  }
}

# Query 4: Get a specific launch by ID
query GetLaunchById($id: ID!) {
  launch(id: $id) {
    id
    mission_name
    launch_date_local
    launch_date_utc
    launch_year
    launch_success
    details
    upcoming
    launch_site {
      site_id
      site_name
      site_name_long
    }
    links {
      mission_patch
      article_link
      video_link
      wikipedia
      youtube_id
      flickr_images
    }
    rocket {
      rocket_id
      rocket_name
      rocket_type
      first_stage {
        cores {
          core_serial
          flight
          reused
          land_success
        }
      }
      second_stage {
        payloads {
          payload_id
          customers
          payload_type
          payload_mass_kg
          orbit
        }
      }
    }
  }
}

# Query 5: Search launches by mission name
query SearchLaunchesByMission($missionName: String!) {
  launchesByMissionName(missionName: $missionName) {
    id
    mission_name
    launch_date_local
    launch_success
    launch_site {
      site_name_long
    }
    rocket {
      rocket_name
    }
  }
}

# Query 6: Get all launches with pagination and sorting
query GetAllLaunches($limit: Int, $offset: Int, $sort: String, $order: Order) {
  launches(limit: $limit, offset: $offset, sort: $sort, order: $order) {
    id
    mission_name
    launch_date_local
    launch_success
    upcoming
    rocket {
      rocket_name
    }
  }
}

# Mutation 1: Create a new launch
mutation CreateLaunch($input: LaunchInput!) {
  createLaunch(input: $input) {
    id
    mission_name
    launch_date_local
    launch_site {
      site_name_long
    }
    rocket {
      rocket_name
    }
  }
}

# Mutation 2: Update an existing launch
mutation UpdateLaunch($id: ID!, $input: LaunchInput!) {
  updateLaunch(id: $id, input: $input) {
    id
    mission_name
    launch_date_local
    launch_success
    details
  }
}

# Mutation 3: Delete a launch
mutation DeleteLaunch($id: ID!) {
  deleteLaunch(id: $id)
}

# Subscription 1: Listen for new launches
subscription OnLaunchAdded {
  launchAdded {
    id
    mission_name
    launch_date_local
    rocket {
      rocket_name
    }
  }
}

# Subscription 2: Listen for updates to a specific launch
subscription OnLaunchUpdated($id: ID!) {
  launchUpdated(id: $id) {
    id
    mission_name
    launch_date_local
    launch_success
    details
  }
}