# GraphQL Schema for Launches API

type Query {
    # Get past launches with optional limit
    launchesPast(limit: Int, offset: Int): [Launch]

    # Get upcoming launches with optional limit
    launchesUpcoming(limit: Int, offset: Int): [Launch]

    # Get a specific launch by ID
    launch(id: ID!): Launch

    # Get all launches with pagination
    launches(limit: Int, offset: Int, sort: String, order: Order): [Launch]

    # Search launches by mission name
    launchesByMissionName(missionName: String!): [Launch]
}

type Launch {
    id: ID!
    mission_name: String!
    launch_date_local: String
    launch_date_utc: String
    launch_year: String
    launch_success: Boolean
    details: String
    upcoming: Boolean
    launch_site: LaunchSite
    links: Links
    rocket: Rocket
}

type LaunchSite {
    site_id: String
    site_name: String
    site_name_long: String
}

type Links {
    mission_patch: String
    mission_patch_small: String
    reddit_campaign: String
    reddit_launch: String
    reddit_recovery: String
    reddit_media: String
    presskit: String
    article_link: String
    wikipedia: String
    video_link: String
    youtube_id: String
    flickr_images: [String]
}

type Rocket {
    rocket_id: String
    rocket_name: String
    rocket_type: String
    first_stage: FirstStage
    second_stage: SecondStage
    fairings: Fairings
}

type FirstStage {
    cores: [Core]
}

type Core {
    core_serial: String
    flight: Int
    block: Int
    gridfins: Boolean
    legs: Boolean
    reused: Boolean
    land_success: Boolean
    landing_intent: Boolean
    landing_type: String
    landing_vehicle: String
}

type SecondStage {
    block: Int
    payloads: [Payload]
}

type Payload {
    payload_id: String
    norad_id: [Int]
    reused: Boolean
    customers: [String]
    nationality: String
    manufacturer: String
    payload_type: String
    payload_mass_kg: Float
    payload_mass_lbs: Float
    orbit: String
    orbit_params: OrbitParams
}

type OrbitParams {
    reference_system: String
    regime: String
    longitude: Float
    semi_major_axis_km: Float
    eccentricity: Float
    periapsis_km: Float
    apoapsis_km: Float
    inclination_deg: Float
    period_min: Float
    lifespan_years: Float
    epoch: String
    mean_motion: Float
    raan: Float
    arg_of_pericenter: Float
    mean_anomaly: Float
}

type Fairings {
    reused: Boolean
    recovery_attempt: Boolean
    recovered: Boolean
    ship: String
}

enum Order {
    ASC
    DESC
}

# Mutation type for creating/updating launches (if needed)
type Mutation {
    createLaunch(input: LaunchInput!): Launch
    updateLaunch(id: ID!, input: LaunchInput!): Launch
    deleteLaunch(id: ID!): Boolean
}

input LaunchInput {
    mission_name: String!
    launch_date_local: String
    launch_date_utc: String
    launch_year: String
    launch_success: Boolean
    details: String
    upcoming: Boolean
    launch_site: LaunchSiteInput
    links: LinksInput
    rocket: RocketInput
}

input LaunchSiteInput {
    site_id: String
    site_name: String
    site_name_long: String
}

input LinksInput {
    mission_patch: String
    mission_patch_small: String
    reddit_campaign: String
    reddit_launch: String
    reddit_recovery: String
    reddit_media: String
    presskit: String
    article_link: String
    wikipedia: String
    video_link: String
    youtube_id: String
    flickr_images: [String]
}

input RocketInput {
    rocket_id: String
    rocket_name: String
    rocket_type: String
}

# Subscription type for real-time updates (if needed)
type Subscription {
    launchAdded: Launch
    launchUpdated(id: ID!): Launch
}